# Generated by Django 3.0.1 on 2020-05-04 18:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('projects', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('department', models.CharField(choices=[('CHEM', 'Chemical Engineering'), ('CSE', 'Computer Science and Engineering'), ('CIVIL', 'Civil Engineering'), ('EEE', 'Electrical and Electronics Engineering'), ('ECE', 'Electronics and Communications Engineering'), ('ICE', 'Instrumentation and Control Engineering'), ('MECH', 'Mechanical Engineering'), ('META', 'Metallurgical and Materials Engineering'), ('PROD', 'Production Engineering')], max_length=200)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('users_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('research_areas', models.CharField(help_text='Enter comma separated Areas of research', max_length=200)),
                ('google_scholar', models.CharField(blank=True, help_text='Enter your Google scholar ID', max_length=200)),
                ('photo', models.ImageField(default='users_photo/default_user.jpg', upload_to='users_photo')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('users.users',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('users_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('year', models.IntegerField(choices=[(1, '1st'), (2, '2nd'), (3, '3rd'), (4, '4th')])),
                ('cgpa', models.DecimalField(decimal_places=2, max_digits=3)),
                ('github_link', models.URLField(default='', help_text='Link to GitHub profile')),
                ('linkedin_link', models.URLField(help_text='Link to LinkedIn profile')),
                ('resume_link', models.URLField(help_text='Link to Resume')),
                ('transcript_link', models.URLField(help_text='Link to Transcript')),
                ('areas_of_interest', models.CharField(help_text='Areas of interest', max_length=200)),
                ('photo', models.ImageField(default='users_photo/default_user.jpg', upload_to='users_photo/default_user.jpg')),
                ('bio', models.CharField(blank=True, help_text='Enter short bio(max 300 chars)', max_length=300)),
                ('projects', models.ManyToManyField(blank=True, to='projects.Projects')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('users.users',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.CharField(help_text='Feedback', max_length=300)),
                ('rating', models.IntegerField(choices=[(1, 'Poor'), (2, 'Average'), (3, 'Good'), (4, 'Very Good'), (5, 'Excellent')], default=2)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='projects.Projects')),
                ('contributor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='users.Student')),
            ],
        ),
    ]
